{"version":3,"sources":["components/Nav/scroll.js","components/Score/index.js","components/Nav/index.js","components/Banner/index.js","components/Clickable/index.js","utils/API.js","components/ClickContainer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["window","onscroll","header","document","getElementById","body","scrollTop","documentElement","style","fontSize","backgroundColor","boxShadow","scrollFunction","Score","this","guessMessage","props","message","key","className","score","Component","Nav","id","Banner","Clickable","state","clicked","click","resetScore","setMessage","setState","increaseScore","shuffleClickables","onClick","data-clicked","src","img","alt","axios","get","BASEURL","RowBreak","ClickContainer","clickables","makeClickables","clicks","pics","map","d","i","registerClick","API","then","response","data","newPictures","length","picture","push","urls","raw","pictures","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffledClicks","shuffle","c","Wrapper","newMsg","msg","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cc00a0a.chunk.js","sourcesContent":["// When the user scrolls down 50px from the top of the document, resize the header's font size\nwindow.onscroll = function() {\n  scrollFunction();\n};\n\nfunction scrollFunction() {\n  const header = document.getElementById(\"header\");\n  if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\n    header.style.fontSize = \"20px\";\n    header.style.backgroundColor = \"#94baecdd\";\n    header.style.boxShadow = \"2px 5px 8px\"\n  } else {\n    header.style.fontSize = \"30px\";\n    header.style.backgroundColor = \"#94baecff\";\n    header.style.boxShadow = \"2px 1px 8px\"\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./index.css\"\n\nclass Score extends Component {\n  updateScoreMessage() {\n    this.guessMessage(\"correct\");\n    this.props.message = \"correct\";\n  }\n\n  render() {\n    return (\n      <>\n        <li key=\"2\" className={`nav-item message ${this.props.message}`} >\n          {this.props.message\n            ? this.props.message === \"correct\" ? \"That's right!\" : \"You've already clicked that one\"\n            : \"Click an image below\"}\n        </li>\n        <li key=\"3\" className=\"nav-item\">Your score: {this.props.score}</li>\n      </>\n    );\n  }\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport \"./scroll\"\nimport Score from \"../Score\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <>\n        <nav className=\"navbar navbar-dark d-block sticky-top\" id=\"header\">\n          <ul className=\"navbar-nav d-flex justify-content-between flex-row\">\n            <li key=\"1\" className=\"nav-item\">Clickyman</li>\n            <Score score={this.props.score} message={this.props.message}/>\n          </ul>\n        </nav>\n      </>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\n\nimport \"./index.css\"\n\nclass Banner extends Component {\n  render() {\n    return (\n      <div className=\"jumbotron jumbotron-fluid d-flex\">\n        <div className=\"container flex-column\">\n          <h1 className=\"display-3 align-items-center\">Make a Click</h1>\n          <h2 className=\"display-5\">Click on the images below and watch your score go up. <br/> But watch out! <br/>If you click the same image twice the game will be over and your score will be reset.</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Banner;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\n\nclass Clickable extends Component {\n\n  state = {\n    clicked: false\n  }\n\n  click = () => {\n    if (!this.state.clicked) {\n      this.setState({ clicked: true })\n      this.props.increaseScore();\n      this.props.setMessage(\"correct\");\n    } else {\n      this.props.resetScore();\n      this.props.setMessage(\"incorrect\");\n    }\n    this.props.shuffleClickables();\n  };\n\n  render() {\n    return (\n        <button\n          key={this.props.id}\n          className=\"btn col\"\n          onClick={this.click}\n          data-clicked={this.state.clicked}\n        >\n          <img src={this.props.img} alt={this.props.alt} />\n        </button>\n    );\n  }\n}\n\nexport default Clickable;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://api.unsplash.com/photos/random?count=15&orientation=squarish&client_id=\";\nconst APIKEY = \"b457260525de27ea96e1a5e2e4f91b8ef35e5adc6bb8a6118c7d224657cbbf8d\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  search: function() {\n    return axios.get(BASEURL + APIKEY);\n  }\n};\n","import React, { Component } from \"react\";\nimport Clickable from \"../Clickable\";\n\nimport API from \"../../utils/API\";\nimport clicks from \"../../utils/clicks.json\";\n\nclass ClickContainer extends Component {\n  state = {\n    clickables: []\n  };\n\n  componentDidMount() {\n    this.setState(state => {\n      return {\n        clickables: this.makeClickables(clicks)\n      }\n    })\n  }\n\n  makeClickables(pics) {\n    const clickables = pics.map((d, i) => {\n      return (\n        <Clickable\n          key={d.key}\n          img={d.img}\n          id={d.key}\n          clicked={d.clicked}\n          increaseScore={this.props.increaseScore}\n          resetScore={this.props.resetScore}\n          setMessage={this.props.setMessage}\n          registerClick={key => this.registerClick(key)}\n          shuffleClickables={() => this.shuffleClickables()}\n        />\n      );\n    });\n    return clickables;\n  }\n\n  getPictures() {\n    API.search()\n      .then(response => {\n        return response.data;\n      })\n      .then(data => {\n        let newPictures = [];\n\n        for (let i = 0; i < data.length; i++) {\n          const picture = data[i];\n          newPictures.push({\n            key: picture.id,\n            img: picture.urls.raw,\n            clicked: false\n          });\n        }\n\n        return newPictures;\n      })\n      .then(pictures => {\n        this.setState({\n          pictures\n        });\n      })\n      .then(() => {\n        this.setState({\n          clickables: this.makeClickables()\n        });\n      });\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length;\n    var temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  shuffleClickables() {\n    let shuffledClicks = this.shuffle(this.state.clickables);\n    this.setState({\n      clickables: shuffledClicks\n    });\n  }\n\n  render() {\n    // console.log(this.state);\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.clickables.map((c, i) => {\n            if ((i + 1) % 5 === 0) {\n              const row = (\n                <>\n                  {c}\n                  <RowBreak />\n                </>\n              );\n              return row;\n            } else {\n              return c;\n            }\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction RowBreak(props) {\n  return <div className=\"w-100\" />;\n}\n\nexport default ClickContainer;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Banner from \"../Banner\";\nimport ClickContainer from \"../ClickContainer\";\n\nclass Wrapper extends Component {\n  state = {\n    score: 0,\n    message: \"\"\n  };\n\n  increaseScore() {\n    this.setState(state => {\n      return { score: state.score + 1 };\n    });\n  }\n\n  resetScore() {\n    this.setState(state => {\n      return { score: 0 };\n    });\n  }\n\n  setMessage(newMsg) {\n    this.setState(state => {\n      return { message: newMsg };\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Nav\n          score={this.state.score}\n          message={this.state.message}\n        />\n        <Banner />\n        <ClickContainer\n          increaseScore={() => this.increaseScore()}\n          resetScore={() => this.resetScore()}\n          setMessage={(msg) => this.setMessage(msg)}\n        />\n      </>\n    );\n  }\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\"\n\nfunction App() {\n  return (\n    <>\n      <Wrapper />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}